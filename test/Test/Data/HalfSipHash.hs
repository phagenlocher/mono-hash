module Test.Data.HalfSipHash where

import Data.Char (chr)
import Data.String (IsString, fromString)
import Data.Word (Word32, Word64)

key :: Word64
key = 0x0001020304050607

inputs :: (IsString a, Monoid a) => [a]
inputs = fmap (\n -> fromString $ fmap chr [0 .. n - 1]) [0 .. 64 - 1]

halfSipHash24VectorsForWord32 :: [Word32]
halfSipHash24VectorsForWord32 =
  [ 0xa9359f5b,
    0x27475ab8,
    0xfa62a603,
    0x8afee704,
    0x2a6e4689,
    0xc5fab669,
    0x5863fc23,
    0x8bcf63c5,
    0xd0b8848f,
    0xf806e779,
    0x94b07934,
    0x08083050,
    0x57f0872f,
    0x77e663ff,
    0xd6fff87c,
    0x74fe2b97,
    0xd9b5ac84,
    0xc474645b,
    0x465b8d9b,
    0x7befe387,
    0xe34d1045,
    0x613f62b3,
    0x70f367fe,
    0xe6adb8bd,
    0x27400c63,
    0x26787875,
    0x4f567b5f,
    0x3ab0e669,
    0xb0644000,
    0xff670fb4,
    0x509e338b,
    0x5d589f1a,
    0xfee72112,
    0x33753259,
    0x6a434f8c,
    0xfe28b729,
    0xe75cc6ec,
    0x697e8d54,
    0x63688b0f,
    0x650b62b4,
    0xb6bc1840,
    0x5d074505,
    0x2442fd2e,
    0x7bb7863a,
    0x7705d548,
    0xd75208b1,
    0xb6d499c8,
    0x0892202e,
    0x69e12ce3,
    0x8db580e5,
    0x369764c6,
    0x016e0204,
    0x3b85f3d4,
    0xfedb66be,
    0x1e692a3a,
    0xc68984c0,
    0xa5c5b940,
    0x9be9e88c,
    0x7dbc8140,
    0x7c078ec5,
    0xd4e76c73,
    0x428fcbb9,
    0xbd83997a,
    0x59ea4a74
  ]

halfSipHash24VectorsForWord64 :: [Word64]
halfSipHash24VectorsForWord64 =
  [ 0x218d1f59b9b83cc8,
    0xbe552412f8387315,
    0x064f39ef7c50eb57,
    0xce0f1a45f7060679,
    0xd5e78a175be52ea1,
    0xcb9d7c3f2f3db580,
    0xce3e91358aa2bc25,
    0xff202728b07bc684,
    0xedfee820bce4858c,
    0x5b51cccc13888307,
    0x95b0469f06a6f2ee,
    0xae26333994ddcd48,
    0x7bc71f9faef5c799,
    0x5a2352d75a0c3744,
    0x3bb1a870eae8e658,
    0x217d0bcb4e81c902,
    0x7336aad25f7bf3b5,
    0x37adc0641c4c4f6a,
    0xc9b2db2b9a3e42f9,
    0xf910e48020ab363c,
    0x1bf52b0a6feea7db,
    0x00741dc269e8b3ef,
    0xe20103fa1ba776ef,
    0x4c2210e54b681d73,
    0x70741045ae3fa6f1,
    0x0c86403739714038,
    0x0d899ed8112923f0,
    0x226bf5fab81ee1b8,
    0x2d925ffb1e0016b5,
    0x361958d52cee10f1,
    0x291aaf864898179d,
    0x863c7f155c34117c,
    0x28709d46d811626c,
    0x248477681d28f89c,
    0x8324e4d7528f9830,
    0xf9efd4e13aea6bd8,
    0x86d67a40ec4276dc,
    0x3f6292eccca97e35,
    0xcbd92ee724d42109,
    0x368df6808d403d79,
    0x5b38c81c67c8ae4c,
    0x95ab7189d439acb3,
    0xa91a52c025327024,
    0x5b0087c69528acea,
    0x1e30f3ad27dcb15a,
    0x697f5c9a90324ed4,
    0x495c0f995557dc38,
    0x9427202a3c29f94d,
    0xa9eaa8c04ba93e3e,
    0xeea4c1737d011218,
    0x912d568fd8f65a49,
    0x56919596b0ff5c97,
    0x02445a7998f550e1,
    0x86ec466ce71d1fb2,
    0x359569e7d289e3bc,
    0x871b05ca62bb7c96,
    0xa1a492f942f15f1d,
    0x12ec267ff6095b6e,
    0x5d1b5ea1b231d89d,
    0xd8cfb4453f92ee54,
    0xd6762890bf26e460,
    0x313563a4b7ed5cf3,
    0xf90b3ab572d46693,
    0x2ea63c71bf326087
  ]